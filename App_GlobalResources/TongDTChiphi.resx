<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlDataSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
SELECT CARRIER, AC_Group, Flt_Type, Network, STATUS, SUM(SL_ALL) SL_ALL, SUM(SL_FULL) SL_FULL, SUM(REV) REV, SUM(OTH_REV) OTH_REV, SUM(TOTAL_REV) TOTAL_REV, 
SUM(COST) COST, SUM(ONBEHALFOFCTY) ONBEHALFOFCTY, SUM(COSTCTY) COSTCTY, SUM(COST_BRANCH) COST_BRANCH, SUM(Cost_BDS) Cost_BDS,
SUM(Cost_KST) Cost_KST, SUM(BDS_Disb) BDS_Disb, SUM(KST_Disb) KST_Disb, 
ISNULL(SUM(COST), 0) + ISNULL(SUM(ONBEHALFOFCTY), 0) + ISNULL(SUM(COSTCTY), 0) + ISNULL(SUM(COST_BRANCH), 0) + ISNULL(SUM(Cost_BDS), 0)  + ISNULL(SUM(Cost_KST), 0) + ISNULL(SUM(BDS_Disb), 0)  + ISNULL(SUM(KST_Disb), 0) TOTAL_COST, 
ISNULL(SUM(TOTAL_REV), 0)-(ISNULL(SUM(COST), 0) + ISNULL(SUM(ONBEHALFOFCTY), 0) + ISNULL(SUM(COSTCTY), 0) + ISNULL(SUM(COST_BRANCH), 0) + ISNULL(SUM(Cost_BDS), 0)  + ISNULL(SUM(Cost_KST), 0) + ISNULL(SUM(BDS_Disb), 0)  + ISNULL(SUM(KST_Disb), 0)) DIFF
FROM (
Select Flt.CARRIER, Flt.AC_Group, Flt.Flt_Type, Flt.Network, Flt.STATUS, SUM(Flt.FLS) SL_ALL, SUM(Flt.FLS) SL_FULL, 
SUM(ISNULL(Flt.REV, 0)) -  (SUM(ISNULL(Flt.ALLOCATE_OTH_REV, 0))- SUM(ISNULL(Flt.DISCOUNT, 0))) REV, 
SUM(ISNULL(Flt.ALLOCATE_OTH_REV, 0))- SUM(ISNULL(Flt.DISCOUNT, 0)) OTH_REV,  
SUM(Flt.REV) TOTAL_REV, 
SUM(Ops.Cost_Branch) COST, 
SUM(Ops.Cost_Branch_Disb) ONBEHALFOFCTY,
SUM(Ops.Cost_CTY) COSTCTY,
SUM(Ops.Cost_Disb) COST_BRANCH,
SUM(Ops.Cost_BDS) Cost_BDS,
SUM(Ops.Cost_KST) Cost_KST,
SUM(Ops.BDS_Disb) BDS_Disb,
SUM(Ops.KST_Disb) KST_Disb
FROM  V_FLT_OPS Flt LEFT OUTER JOIN (Select SUM(f.Cost_Branch) Cost_Branch,
				SUM(f.Cost_CTY) Cost_CTY,
				SUM(f.Cost_Branch_Disb) Cost_Branch_Disb,
				SUM(f.Cost_Disb) Cost_Disb,
				SUM(f.Cost_BDS) Cost_BDS,
				SUM(f.Cost_KST) Cost_KST,
				SUM(f.BDS_Disb) BDS_Disb,
				SUM(f.KST_Disb) KST_Disb,
				f.FltOpsID  
				FROM RouteProfitFact f 
				WHERE f.VersionID = @pVersionID 
				AND ((f.CostType = @pCostType) OR @pCostType = 'ALL') 
			     	Group By f.FltOpsID) Ops 
On Flt.ID = Ops.FltOpsID 
WHERE Flt.Flt_Date between @pFromDate and @pToDate and ((Area=@pAreaCode) OR @pAreaCode='ALL')
and ((Flt.CARRIER IN (Select Result From dbo.StrToTbl(@pCarrier, ','))) OR @pCarrier ='ALL')
and (Flt.NETWORK= @pNetwork OR @pNetwork ='ALL')
and ((Flt.FLT_TYPE IN (Select Result  From dbo.StrToTbl(@pFltType, ','))) OR @pFltType ='ALL')
group by Flt.CARRIER, Flt.AC_Group, Flt.Flt_Type, Flt.Network, Flt.STATUS
UNION ALL
Select CARRIER, AC_Group, Flt_Type, Network, STATUS,
SUM(FLS) SL_ALL, 0 SL_FULL, 
SUM(ISNULL(REV, 0)) -  (SUM(ISNULL(ALLOCATE_OTH_REV, 0)) - SUM(ISNULL(DISCOUNT, 0))) REV, 
SUM(ISNULL(ALLOCATE_OTH_REV, 0)) - SUM(ISNULL(DISCOUNT, 0)) OTH_REV,  
SUM(REV) TOTAL_REV, 
0 COST, 
0 ONBEHALFOFCTY,
0 COSTCTY,
0 COST_BRANCH,
0 Cost_BDS,
0 Cost_KST,
0 BDS_Disb,
0 KST_Disb
FROM V_FLT_OPS#FULL C
WHERE Flt_Date between @pFromDate  and @pToDate and ((Area=@pAreaCode) OR @pAreaCode='ALL')
and ((CARRIER IN (Select Result From dbo.StrToTbl(@pCarrier, ','))) OR @pCarrier ='ALL')
and (NETWORK= @pNetwork OR @pNetwork ='ALL')
and ((FLT_TYPE IN (Select Result  From dbo.StrToTbl(@pFltType, ','))) OR @pFltType ='ALL')
group by CARRIER, AC_Group, Flt_Type, Network, STATUS) T 
group by CARRIER, AC_Group, Flt_Type, Network, STATUS
Order by CARRIER, AC_Group</value>
  </data>
  <data name="customSqlQuery2.Sql" xml:space="preserve">
    <value>Select AreaCode, AirlinesID Carrier, SUM(Iif(servicegrouptype = 8, 0, Amount)) Amount,
SUM(Iif(servicegrouptype = 8, Amount, 0)) Discount
  from V_VMS_OTH_REVENUE v 
  CROSS JOIN (SELECT ISNULL(SysValue, 'M') Allocate_Method
		   FROM QLKH_App.dbo.SystemParas 
		   WHERE SysCode = 'ALLOCATE_METHOD') m 
where ((areacode=@pAreaCode) OR @pAreaCode = 'ALL')
and  v.date between @pFromDate and @pToDate 
And IsNull(Amount, 0) &lt;&gt; 0
and servicegrouptype not in (3, 4, 10)
And v.Allocated =0
--and  not exists (Select null From V_FLT_OPS f 
--			where f.Carrier =  v.airlinesid And f.Area = v.AreaCode
--			and f.Flt_date between v.ApplyFromDate and v.ApplyToDate
--			And ((m.Allocate_Method = 'M' 
--			And f.Flt_Month = Month(v.date) And f.Flt_Year = Year(v.date)) 
--			OR m.Allocate_Method &lt;&gt; 'M')
--			And ((m.Allocate_Method = 'M' 
--			And f.Flt_date between @pFromDate and @pToDate) 
--			OR m.Allocate_Method &lt;&gt; 'M')
			--And f.Flt_Month = Month(v.date) And f.Flt_Year = Year(v.date)
			--And f.Flt_date between @pFromDate and @pToDate
--			)
Group By AreaCode, AirlinesID
Order By AreaCode DESC, AirlinesID</value>
  </data>
  <data name="customSqlQuery3.Sql" xml:space="preserve">
    <value>Select s.Description, d.RevCostDate, d.RevCostMonth,d.RevCostYear, d.Amount, l.ErrMsg, l.Airport
From StoreDetail d 
Join Store s ON d.StoreID = s.StoreID 
Join StoreAllocateLog l On s.StoreID = l.StoreID AND d.RevCostMonth = l.FltMonth
WHERE s.VersionID= @pVersionID  AND ((Airport= @pAreaCode) OR @pAreaCode ='ALL')
AND d.RevCostDate between @pFromDate and @pToDate And Isnull(d.Amount, 0) &lt;&gt; 0
</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iQ0FSUklFUiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJBQ19Hcm91cCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJGbHRfVHlwZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJOZXR3b3JrIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlNUQVRVUyIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJTTF9BTEwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlNMX0ZVTEwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlJFViIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iT1RIX1JFViIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iVE9UQUxfUkVWIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDT1NUIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJPTkJFSEFMRk9GQ1RZIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDT1NUQ1RZIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDT1NUX0JSQU5DSCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29zdF9CRFMiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNvc3RfS1NUIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJCRFNfRGlzYiIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iS1NUX0Rpc2IiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlRPVEFMX0NPU1QiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRJRkYiIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlF1ZXJ5XzEiPjxGaWVsZCBOYW1lPSJBcmVhQ29kZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDYXJyaWVyIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkFtb3VudCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iRGlzY291bnQiIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlF1ZXJ5XzIiPjxGaWVsZCBOYW1lPSJEZXNjcmlwdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJSZXZDb3N0RGF0ZSIgVHlwZT0iRGF0ZVRpbWUiIC8+PEZpZWxkIE5hbWU9IlJldkNvc3RNb250aCIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IlJldkNvc3RZZWFyIiBUeXBlPSJJbnQzMiIgLz48RmllbGQgTmFtZT0iQW1vdW50IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJFcnJNc2ciIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQWlycG9ydCIgVHlwZT0iU3RyaW5nIiAvPjwvVmlldz48L0RhdGFTZXQ+</value>
  </data>
</root>